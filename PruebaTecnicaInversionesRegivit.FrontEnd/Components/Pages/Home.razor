@page "/"
@using PruebaTecnicaInversionesRegivit.FrontEnd.Services
@using PruebaTecnicaInversionesRegivit.Shared.DTOs.Account
@using PruebaTecnicaInversionesRegivit.Shared.DTOs.Client
@using PruebaTecnicaInversionesRegivit.Shared.DTOs.Transaction
@using PruebaTecnicaInversionesRegivit.Shared.Models
@inject NavigationManager Navigation
@inject ToastService ToastService

<PageTitle>Cuentas</PageTitle>

<div class="mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <i class="fas fa-piggy-bank text-primary fs-3 me-3"></i>
            <h3 class="mb-0 text-primary">Gestión de Cuentas</h3>
        </div>
        <div>
            <Button Class="btn btn-primary" @onclick="OnShowModalAccountClick">
                Nueva Cuenta
            </Button>
        </div>
    </div>
</div>

@if (accountsData == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p>Cargando cuentas...</p>
    </div>
}
else if (!accountsData.Any())
{
    <div class="alert alert-info">No se encontraron cuentas!</div>
}
else
{
    <Grid TItem="AccountGetDto"
               Class="table table-hover table-bordered table-striped"
               Data="accountsData"
               AllowPaging="true"
               PageSize="5">

        <GridColumns>
            <GridColumn TItem="AccountGetDto" HeaderText="Número de Cuenta" PropertyName="AccountNumber" TextAlign="TextAlign.Center">
                @context.AccountNumber
            </GridColumn>

            <GridColumn TItem="AccountGetDto" HeaderText="Saldo" PropertyName="Balance">
                <span class="text-success fw-bold">@context.Balance.ToString("C")</span>
            </GridColumn>

            <GridColumn TItem="AccountGetDto" HeaderText="Nombre del Cliente" PropertyName="AccountName">
                @context.AccountName
            </GridColumn>

            <GridColumn TItem="AccountGetDto" HeaderText="Nombre del Cliente" PropertyName="Client.Name">
                @context.Client.Name
            </GridColumn>

            <GridColumn TItem="AccountGetDto" HeaderText="Fecha de Creación" PropertyName="CreatedAt">
                @context.CreatedAt.ToString("dd/MM/yyyy")
            </GridColumn>

            <GridColumn TItem="AccountGetDto" HeaderText="Transacciones">
                <div class="d-flex align-items-center justify-content-center">
                    <Button Class="btn btn-sm btn-warning me-2" @onclick="() => OnShowModalTransactionClick(context.Id, context.Balance)">
                         Crear
                    </Button>
                    <Button Class="btn btn-sm btn-info" @onclick="() => RouteToViewAccountTransaction(context.Id)">
                         Ver
                    </Button>
                </div>
            </GridColumn>
        </GridColumns>
    </Grid>
}

<!--Modal for Create Transaction-->
<Modal @ref="modalTransaction" title="Crear Transaccón" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <EditForm Model="@transactionForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label class="form-label">Fecha de la Transacción</label>
                <InputDate @bind-value="transactionForm.TransactionDate" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Tipo de Transacción*</label>
                <InputSelect @bind-value="transactionForm.TransactionTypeId" class="form-select">
                    <option value="1">Depósito</option>
                    <option value="2">Retiro</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Monto*</label>
                <InputNumber @bind-value="transactionForm.Amount" class="form-control" />
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalTransactionClick">Cerrar</Button>
        <Button Color="ButtonColor.Primary" @onclick=CreateTransaction>Guardar</Button>
    </FooterTemplate>
</Modal>

<!--Modal for Create Account-->
<Modal @ref="modalAccount" title="Crear Nueva Cuenta" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <EditForm Model="@accountForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Seleccione al Cliente*</label>
                <InputSelect @bind-value="accountForm.ClientId" class="form-select">
                    @if (clients != null)
                    {
                        @foreach (var client in clients)
                        {
                            <option value="@client.Id">@client.Name</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Nombre de la Cuenta*</label>
                <InputText @bind-value="accountForm.AccountName" class="form-control" />
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalAccountClick">Cerrar</Button>
        <Button Color="ButtonColor.Primary" @onclick=CreateAccount>Guardar</Button>
    </FooterTemplate>
</Modal>

@code {
    private IEnumerable<AccountGetDto>? accountsData;
    private List<ClientGetDto>? clients;
    public AccountCreateDto accountForm { get; set; } = new();
    private Modal modalAccount = default!;

    [Inject]
    private IRepository Repository { get; set; } = null!;
    private int accountIdGlobal;
    private decimal BalanceGlobal;

    protected override async Task OnInitializedAsync()
    {
        await GetAllAccounts();
    }

    //Modal Transaction
    public TransactionCreateDto transactionForm { get; set; } = new();
    private Modal modalTransaction = default!;

    private async Task OnShowModalTransactionClick(int accountId, decimal balance)
    {
        accountIdGlobal = accountId;
        BalanceGlobal = balance;
        transactionForm.Amount = 0;
        transactionForm.TransactionTypeId = 0;
        transactionForm.TransactionDate = DateTime.Now;
        await modalTransaction.ShowAsync();
    }

    private async Task OnHideModalTransactionClick()
    {
        

        await modalTransaction.HideAsync();
    }

    private async  Task CreateTransaction()
    {
        if (transactionForm.TransactionTypeId == null || transactionForm.Amount == null)
        {
            ToastService.Notify(new(ToastType.Danger, "Debe de ingresar la información de todos los campos."));
            return;
        }

        if (BalanceGlobal == 0 && (int)transactionForm.TransactionTypeId == 2)
        {
            ToastService.Notify(new(ToastType.Danger, "No tiene fondos para realizar esta operacion"));
            return;
        }

        if ((int)transactionForm.Amount <= 0)
        {
            ToastService.Notify(new(ToastType.Danger, "El monto debe ser mayor de cero."));
            return;
        }
        try {
            var url = $"/api/Transaction/{accountIdGlobal}";
            var transaction = new TransactionCreateDto
                {
                    Amount = (int)transactionForm.Amount,
                    CreatedById = 1,
                    AccountId = accountIdGlobal,
                    TransactionTypeId = (int)transactionForm.TransactionTypeId,
                    TransactionDate = transactionForm.TransactionDate
                };
            var response = await Repository.PostAsync(url, transaction);
            await GetAllAccounts();
            await modalTransaction.HideAsync();
            ToastService.Notify(new(
                ToastType.Success,
                $"Se ha {(transactionForm.TransactionTypeId == 1 ? "depositado" : "retirado")} " +
                $"la cantidad de ${transactionForm.Amount} con éxito."
            ));
        } catch(Exception ex)
        {
            Console.WriteLine(ex);
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}"));
        }
    }


    //Modal New Client
    private async Task OnShowModalAccountClick()
    {
        await GetAllClients();
        await modalAccount.ShowAsync();
    }

    private async Task OnHideModalAccountClick()
    {
        accountForm.AccountName = null;
        accountForm.ClientId = 0;
        await modalAccount.HideAsync();
    }

    private async Task CreateAccount()
    {
       
        try
        {
            var url = $"/api/Account";
            var account = new AccountCreateDto
            {
                ClientId = (int)accountForm.ClientId,
                AccountName = accountForm.AccountName
            };
            var response = await Repository.PostAsync(url, account);
            await GetAllAccounts();
            await modalAccount.HideAsync();
            ToastService.Notify(new(
                ToastType.Success,
                "Se ha creado una nueva cuenta." 
            ));
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}"));
        }
    }
    

    private async Task GetAllAccounts()
    {
        try
        {
            var url = "/api/Account";
            accountsData = await Repository.GetAsync<List<AccountGetDto>>(url);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading accounts: {ex.Message}");
            accountsData = Enumerable.Empty<AccountGetDto>();
        }
    }

    private async Task GetAllClients()
    {
        try
        {
            var url = "/api/Client";
            clients = await Repository.GetAsync<List<ClientGetDto>>(url);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading accounts: {ex.Message}");
            accountsData = Enumerable.Empty<AccountGetDto>();
        }
    }

    //Route to View Account Transaction
    private void RouteToViewAccountTransaction(int accountId)
    {
        Navigation.NavigateTo($"/account-transaction?id={accountId}");
    }
}